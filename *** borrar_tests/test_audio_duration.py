#!/usr/bin/env python3
"""
Script de prueba b√°sica para la funcionalidad de extracci√≥n de duraci√≥n de audio.
"""

import sys
import os
from pathlib import Path

# A√±adir el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

from services.audio_duration_extractor import AudioDurationExtractor


def test_audio_duration_extractor():
    """Prueba b√°sica de la clase AudioDurationExtractor."""
    print("üß™ PRUEBA B√ÅSICA DE AUDIO DURATION EXTRACTOR")
    print("=" * 60)
    
    try:
        # Crear instancia sin context manager para pruebas b√°sicas
        extractor = AudioDurationExtractor()
        
        # Probar conexi√≥n a Supabase
        print("üì° Probando conexi√≥n a Supabase...")
        podcasts = extractor.db.get_all_podcasts()
        print(f"‚úÖ Conexi√≥n exitosa: {len(podcasts)} episodios encontrados")
        
        # Probar obtenci√≥n de episodios sin duraci√≥n
        print("\nüîç Probando obtenci√≥n de episodios sin duraci√≥n...")
        podcasts_without_duration = extractor.get_podcasts_without_duration()
        print(f"‚úÖ Episodios sin duraci√≥n: {len(podcasts_without_duration)}")
        
        # Mostrar algunos ejemplos
        if podcasts_without_duration:
            print("\nüìã Ejemplos de episodios sin duraci√≥n:")
            for i, podcast in enumerate(podcasts_without_duration[:5]):
                print(f"  Episodio #{podcast['program_number']}: {podcast.get('title', 'Sin t√≠tulo')}")
                print(f"    üìÖ Fecha: {podcast.get('date', 'Sin fecha')}")
                print(f"    üéµ Duraci√≥n actual: {podcast.get('duration', 'No definida')}")
        
        # Probar b√∫squeda por n√∫mero de programa
        print("\nüîç Probando b√∫squeda por n√∫mero de programa...")
        if podcasts:
            test_program_number = podcasts[0]['program_number']
            found_podcast = extractor.get_podcast_by_program_number(test_program_number)
            if found_podcast:
                print(f"‚úÖ Episodio #{test_program_number} encontrado: {found_podcast.get('title', 'Sin t√≠tulo')}")
            else:
                print(f"‚ùå Episodio #{test_program_number} no encontrado")
        
        print("\n‚úÖ Prueba b√°sica completada exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba b√°sica: {e}")
        return False


def test_mutagen_extraction():
    """Prueba de extracci√≥n de duraci√≥n con Mutagen."""
    print("\nüß™ PRUEBA DE EXTRACCI√ìN CON MUTAGEN")
    print("=" * 60)
    
    try:
        from mutagen.mp3 import MP3
        print("‚úÖ Mutagen importado correctamente")
        
        # Crear un archivo MP3 de prueba (si existe)
        test_mp3_path = Path("test_audio.mp3")
        if test_mp3_path.exists():
            print(f"üìÅ Archivo de prueba encontrado: {test_mp3_path}")
            
            # Probar extracci√≥n de duraci√≥n
            audio = MP3(str(test_mp3_path))
            if audio.length:
                duration_seconds = int(audio.length)
                duration_minutes = duration_seconds // 60
                duration_remaining = duration_seconds % 60
                
                print(f"‚è±Ô∏è  Duraci√≥n extra√≠da: {duration_minutes}:{duration_remaining:02d} ({duration_seconds} segundos)")
                print("‚úÖ Extracci√≥n de duraci√≥n exitosa")
            else:
                print("‚ùå No se pudo extraer duraci√≥n del archivo de prueba")
        else:
            print("‚ö†Ô∏è  No se encontr√≥ archivo de prueba (test_audio.mp3)")
            print("   Para probar Mutagen, crea un archivo MP3 llamado 'test_audio.mp3' en el directorio ra√≠z")
        
        return True
        
    except ImportError:
        print("‚ùå Error: Mutagen no est√° instalado")
        print("   Ejecuta: pip install mutagen")
        return False
    except Exception as e:
        print(f"‚ùå Error en prueba de Mutagen: {e}")
        return False


def main():
    """Funci√≥n principal de pruebas."""
    print("üéµ PRUEBAS DE AUDIO DURATION EXTRACTOR")
    print("=" * 60)
    
    # Prueba b√°sica
    basic_test_passed = test_audio_duration_extractor()
    
    # Prueba de Mutagen
    mutagen_test_passed = test_mutagen_extraction()
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print(f"‚úÖ Prueba b√°sica: {'PAS√ì' if basic_test_passed else 'FALL√ì'}")
    print(f"‚úÖ Prueba Mutagen: {'PAS√ì' if mutagen_test_passed else 'FALL√ì'}")
    
    if basic_test_passed and mutagen_test_passed:
        print("\nüéâ Todas las pruebas pasaron exitosamente")
        print("   Puedes proceder con la extracci√≥n de duraci√≥n")
    else:
        print("\n‚ö†Ô∏è  Algunas pruebas fallaron")
        print("   Revisa los errores antes de continuar")


if __name__ == "__main__":
    main() 