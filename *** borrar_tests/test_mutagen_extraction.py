#!/usr/bin/env python3
"""
Script de prueba espec√≠fica para Mutagen y extracci√≥n de duraci√≥n de archivos MP3.
"""

import sys
import os
from pathlib import Path

# A√±adir el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))


def test_mutagen_import():
    """Prueba la importaci√≥n de Mutagen."""
    print("üß™ PRUEBA DE IMPORTACI√ìN DE MUTAGEN")
    print("=" * 50)
    
    try:
        from mutagen import File
        from mutagen.mp3 import MP3
        print("‚úÖ Mutagen importado correctamente")
        print(f"  - File: {File}")
        print(f"  - MP3: {MP3}")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando Mutagen: {e}")
        print("   Ejecuta: pip install mutagen")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False


def test_mp3_duration_extraction(file_path: Path):
    """Prueba la extracci√≥n de duraci√≥n de un archivo MP3 espec√≠fico."""
    print(f"\nüß™ PRUEBA DE EXTRACCI√ìN DE DURACI√ìN")
    print(f"üìÅ Archivo: {file_path}")
    print("=" * 50)
    
    try:
        from mutagen.mp3 import MP3
        
        if not file_path.exists():
            print(f"‚ùå El archivo no existe: {file_path}")
            return False
        
        # Obtener informaci√≥n del archivo
        file_size = file_path.stat().st_size
        print(f"üìä Tama√±o del archivo: {file_size:,} bytes ({file_size/1024/1024:.1f} MB)")
        
        # Cargar archivo con Mutagen
        print("üìñ Cargando archivo con Mutagen...")
        audio = MP3(str(file_path))
        
        # Verificar que se carg√≥ correctamente
        if not audio:
            print("‚ùå No se pudo cargar el archivo con Mutagen")
            return False
        
        print("‚úÖ Archivo cargado correctamente con Mutagen")
        
        # Extraer duraci√≥n
        if audio.length:
            duration_seconds = int(audio.length)
            duration_minutes = duration_seconds // 60
            duration_remaining = duration_seconds % 60
            
            print(f"‚è±Ô∏è  Duraci√≥n extra√≠da: {duration_minutes}:{duration_remaining:02d}")
            print(f"‚è±Ô∏è  Duraci√≥n en segundos: {duration_seconds}")
            
            # Calcular bitrate aproximado
            if duration_seconds > 0:
                bitrate_kbps = (file_size * 8) / (duration_seconds * 1000)
                print(f"üéµ Bitrate aproximado: {bitrate_kbps:.0f} kbps")
            
            return True
        else:
            print("‚ùå No se pudo extraer la duraci√≥n del archivo")
            return False
            
    except Exception as e:
        print(f"‚ùå Error extrayendo duraci√≥n: {e}")
        return False


def test_multiple_formats():
    """Prueba diferentes formatos de audio."""
    print("\nüß™ PRUEBA DE DIFERENTES FORMATOS")
    print("=" * 50)
    
    try:
        from mutagen import File
        
        # Lista de archivos de prueba comunes
        test_files = [
            "test_audio.mp3",
            "test_audio.m4a",
            "test_audio.flac",
            "test_audio.wav"
        ]
        
        for filename in test_files:
            file_path = Path(filename)
            if file_path.exists():
                print(f"\nüìÅ Probando formato: {filename}")
                
                try:
                    audio = File(str(file_path))
                    if audio:
                        print(f"‚úÖ Formato soportado: {filename}")
                        if hasattr(audio, 'length') and audio.length:
                            duration_seconds = int(audio.length)
                            duration_minutes = duration_seconds // 60
                            duration_remaining = duration_seconds % 60
                            print(f"  ‚è±Ô∏è  Duraci√≥n: {duration_minutes}:{duration_remaining:02d}")
                        else:
                            print(f"  ‚ö†Ô∏è  No se pudo extraer duraci√≥n")
                    else:
                        print(f"‚ùå Formato no soportado: {filename}")
                except Exception as e:
                    print(f"‚ùå Error con {filename}: {e}")
            else:
                print(f"‚ö†Ô∏è  Archivo no encontrado: {filename}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de formatos: {e}")
        return False


def test_error_handling():
    """Prueba el manejo de errores con archivos inv√°lidos."""
    print("\nüß™ PRUEBA DE MANEJO DE ERRORES")
    print("=" * 50)
    
    try:
        from mutagen.mp3 import MP3
        
        # Probar con archivo que no existe
        print("üìÅ Probando con archivo inexistente...")
        try:
            audio = MP3("archivo_inexistente.mp3")
            print("‚ùå No deber√≠a haber cargado un archivo inexistente")
            return False
        except Exception as e:
            print(f"‚úÖ Error manejado correctamente: {type(e).__name__}")
        
        # Probar con archivo de texto (no MP3)
        test_file = Path("test_text.txt")
        try:
            with open(test_file, 'w') as f:
                f.write("Este no es un archivo MP3")
            
            print("üìÅ Probando con archivo de texto...")
            try:
                audio = MP3(str(test_file))
                print("‚ö†Ô∏è  Mutagen intent√≥ cargar archivo de texto")
            except Exception as e:
                print(f"‚úÖ Error manejado correctamente: {type(e).__name__}")
            
            # Limpiar archivo de prueba
            test_file.unlink(missing_ok=True)
            
        except Exception as e:
            print(f"‚ùå Error creando archivo de prueba: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de manejo de errores: {e}")
        return False


def main():
    """Funci√≥n principal de pruebas de Mutagen."""
    print("üéµ PRUEBAS DE MUTAGEN Y EXTRACCI√ìN DE DURACI√ìN")
    print("=" * 60)
    
    # Prueba de importaci√≥n
    import_success = test_mutagen_import()
    
    if not import_success:
        print("\n‚ùå No se puede continuar sin Mutagen")
        return
    
    # Prueba con archivo MP3 espec√≠fico
    test_mp3 = Path("test_audio.mp3")
    if test_mp3.exists():
        extraction_success = test_mp3_duration_extraction(test_mp3)
    else:
        print(f"\n‚ö†Ô∏è  No se encontr√≥ archivo de prueba: {test_mp3}")
        print("   Para probar la extracci√≥n, crea un archivo MP3 llamado 'test_audio.mp3'")
        extraction_success = False
    
    # Prueba de diferentes formatos
    formats_success = test_multiple_formats()
    
    # Prueba de manejo de errores
    error_handling_success = test_error_handling()
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS DE MUTAGEN")
    print(f"‚úÖ Importaci√≥n: {'PAS√ì' if import_success else 'FALL√ì'}")
    print(f"‚úÖ Extracci√≥n MP3: {'PAS√ì' if extraction_success else 'FALL√ì'}")
    print(f"‚úÖ Formatos m√∫ltiples: {'PAS√ì' if formats_success else 'FALL√ì'}")
    print(f"‚úÖ Manejo de errores: {'PAS√ì' if error_handling_success else 'FALL√ì'}")
    
    passed_tests = sum([import_success, extraction_success, formats_success, error_handling_success])
    total_tests = 4
    
    if passed_tests == total_tests:
        print(f"\nüéâ ¬°TODAS LAS PRUEBAS PASARON! ({passed_tests}/{total_tests})")
        print("   Mutagen est√° funcionando correctamente")
    elif passed_tests >= total_tests // 2:
        print(f"\n‚ö†Ô∏è  PRUEBAS PARCIALMENTE EXITOSAS ({passed_tests}/{total_tests})")
        print("   Mutagen funciona b√°sicamente, pero hay algunos problemas")
    else:
        print(f"\n‚ùå MUCHAS PRUEBAS FALLARON ({passed_tests}/{total_tests})")
        print("   Revisa la instalaci√≥n de Mutagen")


if __name__ == "__main__":
    main() 