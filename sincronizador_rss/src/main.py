#!/usr/bin/env python3
"""
Script principal del sincronizador RSS.
Orquesta todos los componentes para leer el RSS, enriquecer los datos con WordPress
y guardarlos en Supabase.
"""

import sys
import os
from pathlib import Path

# Agregar el directorio src al path para importaciones
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

from components.config_manager import ConfigManager
from components.database_manager import DatabaseManager
from components.rss_data_processor import RSSDataProcessor
from components.wordpress_data_processor import WordPressDataProcessor
from components.wordpress_client import WordPressClient
from components.data_processor import DataProcessor
from components.song_processor import SongProcessor
from utils.logger import logger


def main():
    """
    Funci√≥n principal que orquesta todo el proceso de sincronizaci√≥n.
    """
    logger.info("üöÄ Iniciando sincronizador RSS")
    
    try:
        # Inicializaci√≥n de componentes
        logger.info("üìã Inicializando componentes...")
        
        # 1. Cargar configuraci√≥n
        config_manager = ConfigManager()
        supabase_credentials = config_manager.get_supabase_credentials()
        rss_url = config_manager.get_rss_url()
        wordpress_config = config_manager.get_wordpress_config()
        
        logger.info("‚úÖ Configuraci√≥n cargada correctamente")
        
        # 2. Inicializar gestor de base de datos
        db_manager = DatabaseManager(
            supabase_url=supabase_credentials["url"],
            supabase_key=supabase_credentials["key"]
        )
        
        # 3. Inicializar cliente de WordPress
        wordpress_client = WordPressClient(wordpress_config['api_url'])
        
        # 4. Inicializar procesadores de datos
        rss_processor = RSSDataProcessor(rss_url)
        wordpress_processor = WordPressDataProcessor()
        
        # 5. Inicializar procesador principal (orquestador)
        data_processor = DataProcessor(rss_processor, wordpress_processor)
        
        logger.info("‚úÖ Todos los componentes inicializados correctamente")
        
        # L√≥gica principal de sincronizaci√≥n
        logger.info("üîÑ Iniciando proceso de sincronizaci√≥n...")
        
        # 1. Obtener el episodio m√°s reciente de la base de datos
        logger.info("üìä Verificando episodio m√°s reciente en la base de datos...")
        latest_podcast = db_manager.get_latest_podcast()
        
        if latest_podcast:
            latest_program_number = latest_podcast.get('program_number', 0)
            latest_title = latest_podcast.get('title', 'Sin t√≠tulo')
            logger.info(f"üìÖ Episodio m√°s reciente en BD: {latest_title} (N√∫mero: {latest_program_number})")
        else:
            logger.info("üìÖ No hay episodios en la base de datos, se procesar√°n todos")
            latest_program_number = 0
        
        # 2. Obtener episodios del RSS
        rss_episodes = rss_processor.fetch_and_process_entries()
        logger.info(f"üìª Encontrados {len(rss_episodes)} episodios en el RSS")
        
        # 3. Filtrar solo episodios nuevos (con n√∫mero mayor al √∫ltimo en BD)
        new_episodes = []
        if latest_program_number > 0:
            logger.info(f"üìä Comparando por n√∫mero de episodio: √∫ltimo en BD = {latest_program_number}")
            
            for episode in rss_episodes:
                episode_program_number = episode.get('program_number', 0)
                episode_title = episode.get('title', 'Sin t√≠tulo')
                
                if episode_program_number > latest_program_number:
                    new_episodes.append(episode)
                    logger.debug(f"üÜï Episodio nuevo encontrado: {episode_title} (N√∫mero: {episode_program_number})")
                else:
                    # Los episodios est√°n ordenados por n√∫mero, podemos parar aqu√≠
                    logger.debug(f"‚è≠Ô∏è Episodio ya existe: {episode_title} (N√∫mero: {episode_program_number})")
                    break
            
            logger.info(f"üÜï Encontrados {len(new_episodes)} episodios nuevos para procesar")
        else:
            # Si no hay episodios en BD, procesar todos
            new_episodes = rss_episodes
            logger.info(f"üÜï Procesando todos los {len(new_episodes)} episodios (BD vac√≠a)")
        
        # 4. Si no hay episodios nuevos, terminar
        if not new_episodes:
            logger.info("‚úÖ No hay episodios nuevos. Sincronizaci√≥n completada.")
            return
        
        # 5. Procesar solo los episodios nuevos
        logger.info(f"üöÄ Procesando {len(new_episodes)} episodios nuevos...")
        
        # Contadores para el reporte
        total_new_episodes = len(new_episodes)
        processed_episodes = 0
        error_episodes = 0
        
        # Procesar cada episodio nuevo
        for i, rss_episode in enumerate(new_episodes, 1):
            episode_title = rss_episode.get('title', 'Sin t√≠tulo')
            episode_date = rss_episode.get('date', 'Sin fecha')
            
            logger.info(f"üìù Procesando episodio nuevo {i}/{total_new_episodes}: {episode_title} ({episode_date})")
            
            try:
                # Enriquecer y unificar datos con WordPress
                logger.info(f"üîó Enriqueciendo datos con WordPress para: {episode_title}")
                episode_data = data_processor.process_single_episode(
                    rss_episode=rss_episode,
                    wordpress_client=wordpress_client
                )
                
                if not episode_data:
                    logger.warning(f"‚ö†Ô∏è No se pudieron obtener datos unificados para: {episode_title}")
                    error_episodes += 1
                    continue
                
                # Insertar en la base de datos
                logger.info(f"üíæ Guardando episodio en la BD: {episode_title}")
                new_podcast_id = db_manager.insert_full_podcast(episode_data)
                
                # Procesar y almacenar canciones con SongProcessor
                logger.info(f"üéµ Procesando canciones para: {episode_title}")
                song_processor = SongProcessor(db_manager)
                
                stored_songs_count = song_processor.process_and_store_songs(
                    podcast_id=new_podcast_id,
                    web_playlist=episode_data.get('web_playlist'),
                    rss_playlist=episode_data.get('rss_playlist')
                )
                
                logger.info(f"‚úÖ Episodio guardado exitosamente: {episode_title} ({stored_songs_count} canciones)")
                processed_episodes += 1
                
            except Exception as e:
                logger.error(f"‚ùå Error al procesar episodio '{episode_title}': {e}")
                error_episodes += 1
                continue
        
        # Reporte final
        logger.info("üìä === REPORTE FINAL DE SINCRONIZACI√ìN ===")
        logger.info(f"üìª Total de episodios en RSS: {len(rss_episodes)}")
        logger.info(f"üÜï Episodios nuevos encontrados: {total_new_episodes}")
        logger.info(f"‚úÖ Episodios procesados exitosamente: {processed_episodes}")
        logger.info(f"‚ùå Episodios con errores: {error_episodes}")
        logger.info("üéâ Sincronizaci√≥n completada")
        
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en la sincronizaci√≥n: {e}")
        raise
    
    finally:
        # Cerrar conexi√≥n a la base de datos
        logger.info("üîí Cerrando conexi√≥n a la base de datos...")
        db_manager.close()
        logger.info("‚úÖ Sincronizador finalizado correctamente")


if __name__ == "__main__":
    """
    Punto de entrada principal del sincronizador RSS.
    """
    main() 


# source .venv/bin/activate
# python src/main.py

