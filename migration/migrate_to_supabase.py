#!/usr/bin/env python3
"""
Script para migrar datos desde SQLite a Supabase.
Ejecutar despu√©s de configurar las variables de entorno y crear las tablas en Supabase.
"""

import os
import sqlite3
import sys
from pathlib import Path

from dotenv import load_dotenv

# A√±adir el directorio services al path
sys.path.append(str(Path(__file__).parent.parent / "services"))

from supabase_database import SupabaseDatabase


def get_sqlite_data():
    """Obtiene todos los datos de la base de datos SQLite."""
    db_path = Path(__file__).parent / "popcasting.db"

    if not db_path.exists():
        print("‚ùå No se encontr√≥ la base de datos SQLite (popcasting.db)")
        return None, None, None

    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row

    # Obtener podcasts
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM podcasts ORDER BY id")
    podcasts = [dict(row) for row in cursor.fetchall()]

    # Obtener canciones
    cursor.execute("SELECT * FROM songs ORDER BY id")
    songs = [dict(row) for row in cursor.fetchall()]

    # Obtener links extras
    cursor.execute("SELECT * FROM extra_links ORDER BY id")
    extra_links = [dict(row) for row in cursor.fetchall()]

    conn.close()

    return podcasts, songs, extra_links


def migrate_data():
    """Migra los datos de SQLite a Supabase."""
    print("üöÄ Iniciando migraci√≥n de SQLite a Supabase...")

    # Cargar variables de entorno
    load_dotenv()

    # Verificar variables de entorno
    required_vars = ["supabase_project_url", "supabase_api_key"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(f"‚ùå Variables de entorno faltantes: {', '.join(missing_vars)}")
        print(
            "Aseg√∫rate de configurar el archivo .env con las credenciales de Supabase"
        )
        return False

    try:
        # Inicializar Supabase
        print("üì° Conectando a Supabase...")
        supabase_db = SupabaseDatabase()
        supabase_db.initialize_database()

        # Obtener datos de SQLite
        print("üìÇ Leyendo datos de SQLite...")
        podcasts, songs, extra_links = get_sqlite_data()

        if not podcasts:
            print("‚ùå No se pudieron obtener datos de SQLite")
            return False

        print(
            f"üìä Encontrados {len(podcasts)} podcasts, {len(songs)} canciones, {len(extra_links)} links extras"
        )

        # Migrar podcasts
        print("üîÑ Migrando podcasts...")
        podcast_id_mapping = {}  # Mapeo de IDs de SQLite a Supabase

        for podcast in podcasts:
            try:
                new_id = supabase_db.add_podcast_if_not_exists(
                    title=podcast["title"],
                    date=podcast["date"],
                    url=podcast["url"],
                    program_number=podcast["program_number"],
                    download_url=podcast.get("download_url"),
                    file_size=podcast.get("file_size"),
                )
                podcast_id_mapping[podcast["id"]] = new_id
                print(
                    f"  ‚úÖ Podcast '{podcast['title']}' migrado (ID: {podcast['id']} -> {new_id})"
                )
            except Exception as e:
                print(f"  ‚ùå Error migrando podcast {podcast['id']}: {e}")

        # Migrar canciones
        print("üîÑ Migrando canciones...")
        for song in songs:
            try:
                new_podcast_id = podcast_id_mapping.get(song["podcast_id"])
                if new_podcast_id:
                    supabase_db.add_song(
                        podcast_id=new_podcast_id,
                        title=song["title"],
                        artist=song["artist"],
                        position=song["position"],
                    )
                    print(f"  ‚úÖ Canci√≥n '{song['title']}' migrada")
                else:
                    print(
                        f"  ‚ö†Ô∏è  No se encontr√≥ el podcast_id {song['podcast_id']} para la canci√≥n {song['id']}"
                    )
            except Exception as e:
                print(f"  ‚ùå Error migrando canci√≥n {song['id']}: {e}")

        # Migrar links extras
        print("üîÑ Migrando links extras...")
        for link in extra_links:
            try:
                new_podcast_id = podcast_id_mapping.get(link["podcast_id"])
                if new_podcast_id:
                    supabase_db.add_extra_link(
                        podcast_id=new_podcast_id, text=link["text"], url=link["url"]
                    )
                    print(f"  ‚úÖ Link extra '{link['text']}' migrado")
                else:
                    print(
                        f"  ‚ö†Ô∏è  No se encontr√≥ el podcast_id {link['podcast_id']} para el link {link['id']}"
                    )
            except Exception as e:
                print(f"  ‚ùå Error migrando link extra {link['id']}: {e}")

        # Actualizar informaci√≥n web si existe
        print("üîÑ Actualizando informaci√≥n web...")
        for podcast in podcasts:
            try:
                new_podcast_id = podcast_id_mapping.get(podcast["id"])
                if new_podcast_id:
                    supabase_db.update_web_info(
                        podcast_id=new_podcast_id,
                        wordpress_url=podcast.get("wordpress_url"),
                        cover_image_url=podcast.get("cover_image_url"),
                        web_extra_links=podcast.get("web_extra_links"),
                        web_playlist=podcast.get("web_playlist"),
                    )
                    if any(
                        podcast.get(field)
                        for field in [
                            "wordpress_url",
                            "cover_image_url",
                            "web_extra_links",
                            "web_playlist",
                        ]
                    ):
                        print(
                            f"  ‚úÖ Informaci√≥n web actualizada para podcast {new_podcast_id}"
                        )
            except Exception as e:
                print(
                    f"  ‚ùå Error actualizando informaci√≥n web para podcast {podcast['id']}: {e}"
                )

        print("‚úÖ Migraci√≥n completada exitosamente!")
        print("üìä Resumen:")
        print(f"  - Podcasts migrados: {len(podcast_id_mapping)}")
        print(f"  - Canciones migradas: {len(songs)}")
        print(f"  - Links extras migrados: {len(extra_links)}")

        return True

    except Exception as e:
        print(f"‚ùå Error durante la migraci√≥n: {e}")
        return False


def verify_migration():
    """Verifica que la migraci√≥n fue exitosa."""
    print("üîç Verificando migraci√≥n...")

    try:
        supabase_db = SupabaseDatabase()

        # Verificar podcasts
        podcasts = supabase_db.get_all_podcasts()
        print(f"  üìä Podcasts en Supabase: {len(podcasts)}")

        # Verificar canciones
        if podcasts:
            songs = supabase_db.get_songs_by_podcast_id(podcasts[0]["id"])
            print(f"  üéµ Canciones en el primer podcast: {len(songs)}")

        # Verificar links extras
        if podcasts:
            links = supabase_db.get_extra_links_by_podcast_id(podcasts[0]["id"])
            print(f"  üîó Links extras en el primer podcast: {len(links)}")

        print("‚úÖ Verificaci√≥n completada")
        return True

    except Exception as e:
        print(f"‚ùå Error durante la verificaci√≥n: {e}")
        return False


if __name__ == "__main__":
    print("=" * 60)
    print("üîÑ MIGRADOR DE SQLITE A SUPABASE")
    print("=" * 60)

    # Verificar que existe la base de datos SQLite
    db_path = Path(__file__).parent.parent / "popcasting.db"
    if not db_path.exists():
        print("‚ùå No se encontr√≥ la base de datos SQLite (popcasting.db)")
        print("Aseg√∫rate de que el archivo existe en el directorio ra√≠z del proyecto")
        sys.exit(1)

    # Ejecutar migraci√≥n
    success = migrate_data()

    if success:
        print("\n" + "=" * 60)
        print("üéâ MIGRACI√ìN EXITOSA")
        print("=" * 60)

        # Preguntar si quiere verificar
        response = input("\n¬øDeseas verificar la migraci√≥n? (s/n): ").lower().strip()
        if response in ["s", "si", "s√≠", "y", "yes"]:
            verify_migration()

        print("\nüìù Pr√≥ximos pasos:")
        print("1. Configura las variables de entorno en el archivo .env")
        print("2. Ejecuta el script SQL en Supabase para crear las tablas")
        print("3. Ejecuta este script para migrar los datos")
        print("4. Actualiza las importaciones en tu c√≥digo para usar supabase_database")

    else:
        print("\n" + "=" * 60)
        print("‚ùå MIGRACI√ìN FALLIDA")
        print("=" * 60)
        print("Revisa los errores anteriores y vuelve a intentar")
        sys.exit(1)
