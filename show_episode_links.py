#!/usr/bin/env python3
"""
Script para mostrar la informaci√≥n de los links de los episodios de Popcasting
"""

import sys

from services import database as db


def format_file_size(size_bytes):
    """Formatea el tama√±o del archivo en formato legible"""
    if not size_bytes:
        return "No disponible"

    for unit in ["B", "KB", "MB", "GB"]:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.1f} TB"


def show_episode_links(limit=10):
    """Muestra los links de los episodios m√°s recientes"""
    print("üéµ Links de Episodios de Popcasting")
    print("=" * 80)

    try:
        # Obtener podcasts de la base de datos
        podcasts = db.get_all_podcasts()

        if not podcasts:
            print("‚ùå No se encontraron episodios en la base de datos")
            return

        print(f"üìä Total de episodios en la base de datos: {len(podcasts)}")
        print(f"üìã Mostrando los √∫ltimos {limit} episodios:\n")

        # Mostrar los episodios m√°s recientes
        for i, podcast in enumerate(podcasts[:limit]):
            print(f"üéß Episodio {i+1}: {podcast['title']}")
            print(f"   üìÖ Fecha: {podcast['date']}")
            print(f"   üî¢ N√∫mero: {podcast['program_number']}")

            if podcast["url"]:
                print(f"   üåê Web: {podcast['url']}")
            else:
                print("   üåê Web: No disponible")

            if podcast["download_url"]:
                print(f"   ‚¨áÔ∏è  Descarga: {podcast['download_url']}")
            else:
                print("   ‚¨áÔ∏è  Descarga: No disponible")

            if podcast["file_size"]:
                size_formatted = format_file_size(podcast["file_size"])
                print(f"   üì¶ Tama√±o: {size_formatted}")
            else:
                print("   üì¶ Tama√±o: No disponible")

            print("-" * 80)

    except Exception as e:
        print(f"‚ùå Error al obtener los episodios: {e}")


def show_episode_stats():
    """Muestra estad√≠sticas de los episodios"""
    print("\nüìà Estad√≠sticas de Episodios")
    print("=" * 50)

    try:
        podcasts = db.get_all_podcasts()

        if not podcasts:
            print("‚ùå No se encontraron episodios")
            return

        # Estad√≠sticas b√°sicas
        total_episodes = len(podcasts)
        episodes_with_web = sum(1 for p in podcasts if p["url"])
        episodes_with_download = sum(1 for p in podcasts if p["download_url"])
        episodes_with_size = sum(1 for p in podcasts if p["file_size"])

        print(f"üìä Total de episodios: {total_episodes}")
        print(
            f"üåê Con URL web: {episodes_with_web} ({episodes_with_web/total_episodes*100:.1f}%)"
        )
        print(
            f"‚¨áÔ∏è  Con URL descarga: {episodes_with_download} ({episodes_with_download/total_episodes*100:.1f}%)"
        )
        print(
            f"üì¶ Con tama√±o de archivo: {episodes_with_size} ({episodes_with_size/total_episodes*100:.1f}%)"
        )

        # Estad√≠sticas de tama√±o
        if episodes_with_size > 0:
            sizes = [p["file_size"] for p in podcasts if p["file_size"]]
            avg_size = sum(sizes) / len(sizes)
            min_size = min(sizes)
            max_size = max(sizes)

            print("\nüì¶ Estad√≠sticas de tama√±o:")
            print(f"   ‚Ä¢ Promedio: {format_file_size(avg_size)}")
            print(f"   ‚Ä¢ M√≠nimo: {format_file_size(min_size)}")
            print(f"   ‚Ä¢ M√°ximo: {format_file_size(max_size)}")

    except Exception as e:
        print(f"‚ùå Error al calcular estad√≠sticas: {e}")


def search_episode_by_number(program_number):
    """Busca un episodio espec√≠fico por n√∫mero"""
    print(f"\nüîç Buscando episodio n√∫mero: {program_number}")
    print("=" * 50)

    try:
        podcasts = db.get_all_podcasts()

        found_episodes = []
        for podcast in podcasts:
            if podcast["program_number"] == str(program_number):
                found_episodes.append(podcast)

        if not found_episodes:
            print(f"‚ùå No se encontr√≥ ning√∫n episodio con el n√∫mero {program_number}")
            return

        for episode in found_episodes:
            print(f"üéß {episode['title']}")
            print(f"   üìÖ Fecha: {episode['date']}")
            print(f"   üåê Web: {episode['url']}")
            print(f"   ‚¨áÔ∏è  Descarga: {episode['download_url']}")
            if episode["file_size"]:
                print(f"   üì¶ Tama√±o: {format_file_size(episode['file_size'])}")
            print()

    except Exception as e:
        print(f"‚ùå Error al buscar episodio: {e}")


def main():
    """Funci√≥n principal"""
    if len(sys.argv) > 1:
        command = sys.argv[1]

        if command == "stats":
            show_episode_stats()
        elif command == "search" and len(sys.argv) > 2:
            program_number = sys.argv[2]
            search_episode_by_number(program_number)
        elif command == "help":
            print("Uso del script:")
            print(
                "  python show_episode_links.py          # Mostrar √∫ltimos 10 episodios"
            )
            print("  python show_episode_links.py stats    # Mostrar estad√≠sticas")
            print("  python show_episode_links.py search N # Buscar episodio n√∫mero N")
            print("  python show_episode_links.py help     # Mostrar esta ayuda")
        else:
            print("‚ùå Comando no v√°lido. Usa 'help' para ver las opciones disponibles.")
    else:
        # Comportamiento por defecto: mostrar √∫ltimos episodios
        show_episode_links()
        show_episode_stats()


if __name__ == "__main__":
    main()
