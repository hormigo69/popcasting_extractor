#!/usr/bin/env python3
"""
import sys
from pathlib import Path
from dotenv import load_dotenv
from config import DATABASE_TYPE
from logger_setup import setup_parser_logger
from supabase_database import get_supabase_connection

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

            from scripts.utils.update_web_songs_count import main as update_main

sys.path.insert(0, str(Path(__file__).parent.parent.parent / "services"))

Script para migrar y actualizar el campo web_songs_count en la base de datos.

Este script:
1. Ejecuta el script SQL para a√±adir el campo a Supabase
2. Actualiza el campo web_songs_count para episodios existentes
3. Verifica que la migraci√≥n se haya completado correctamente
"""

# Cargar variables de entorno
load_dotenv()

# A√±adir el directorio ra√≠z al path para importar los m√≥dulos
sys.path.append(str(Path(__file__).parent.parent.parent))

# Importar directamente los m√≥dulos

# Configurar logger
logger = setup_parser_logger()


def run_supabase_migration():
    """
    Ejecuta la migraci√≥n SQL en Supabase para a√±adir el campo web_songs_count.
    """
    try:
        # Verificar si estamos usando Supabase
        if DATABASE_TYPE == "supabase":
            print("üóÑÔ∏è  Detectada base de datos Supabase")
            print("üìù Ejecutando migraci√≥n SQL...")

            # Ejecutar el script SQL para a√±adir el campo
            sql_script = """
            ALTER TABLE podcasts ADD COLUMN IF NOT EXISTS web_songs_count INTEGER;
            CREATE INDEX IF NOT EXISTS idx_podcasts_web_songs_count ON podcasts(web_songs_count);
            """

            try:
                # Obtener conexi√≥n a Supabase
                db = get_supabase_connection()
                # Ejecutar el script SQL
                db.client.rpc("exec_sql", {"sql": sql_script}).execute()
                print("‚úÖ Migraci√≥n SQL ejecutada exitosamente")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è  No se pudo ejecutar la migraci√≥n SQL autom√°ticamente: {e}")
                print("üìã Por favor, ejecuta manualmente el script SQL en Supabase:")
                print("   migration/add_web_songs_count_field.sql")
                return False
        else:
            print("üóÑÔ∏è  Detectada base de datos SQLite")
            print("‚úÖ La migraci√≥n se ejecutar√° autom√°ticamente al inicializar la BD")
            return True

    except Exception as e:
        print(f"‚ùå Error ejecutando migraci√≥n: {e}")
        return False


def main():
    """Funci√≥n principal del script."""
    print("üéµ Migrador de web_songs_count")
    print("=" * 40)

    # Ejecutar migraci√≥n SQL
    migration_success = run_supabase_migration()

    if migration_success:
        print("\nüîÑ Ejecutando actualizaci√≥n de web_songs_count...")

        # Importar y ejecutar el script de actualizaci√≥n
        try:
            update_main()
        except ImportError as e:
            print(f"‚ùå Error importando script de actualizaci√≥n: {e}")
            print(
                "üí° Ejecuta manualmente: python scripts/utils/update_web_songs_count.py"
            )
        except Exception as e:
            print(f"‚ùå Error ejecutando actualizaci√≥n: {e}")
    else:
        print("\n‚ö†Ô∏è  Migraci√≥n SQL no completada. Ejecuta manualmente:")
        print("   1. migration/add_web_songs_count_field.sql en Supabase")
        print("   2. python scripts/utils/update_web_songs_count.py")

    print("\n‚úÖ Proceso de migraci√≥n completado")


if __name__ == "__main__":
    main()
